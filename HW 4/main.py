# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества.
# m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.

"""
n = int(input("Введите длину первого множества: "))
m = int(input("Введите длину второго множества: "))
nSet = set()
mSet = set()

for i in range(n):
    nSet.add(int(input(f"Введите {i + 1} число первого множества: ")))

for i in range(m):
    mSet.add(int(input(f"Введите {i + 1} число второго множества: ")))

inter = list(mSet.intersection(nSet))

for j in range(len(inter) - 1):
    for i in range(len(inter) - 1):
        if inter[i] > inter[i + 1]:
            temp = inter[i]
            inter[i] = inter[i + 1]
            inter[i + 1] = temp

print(inter)
"""

# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растёт на круглой грядке, причём кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, 
# поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, 
# находясь перед некоторым кустом заданной во входном файле грядки.

N = int(input("Введите количество кустов: "))
farm_list = list()
maxFarm = -1

for i in range(N):
    farm_list.append(int(input(f"Введите урожайность {i + 1} куста: ")))

for i in range(N):
    temp_list = farm_list
    j = i
    if i == 0:
        temp_list.insert(i, temp_list.pop())
        j += 1
    summ = temp_list[j] + temp_list[j + 1] + temp_list[j - 1]
    if maxFarm < summ:
        maxFarm = summ

print(maxFarm)